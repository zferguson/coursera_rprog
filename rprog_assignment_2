# Matrix inversion is usually a costly computation and there may be some benefit 
# to caching the inverse of a matrix rather than compute it repeatedly. 
# The following two functions are used to cache the inverse of a matrix

# makeCacheMatrix 

# This function creates a list containing a function to:
# 1. set the value of a matrix
# 2. get the value of a matrix
# 3. set the value of the inverse of the matrix
# 4. get the value of the inverse of the matrix

makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
        x <<- y
        inv <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set = set, get = get,
         setinverse = setinverse,
         getinverse = getinverse)
}

# cacheSolve

# This function computes the inverse of the matrix. It first checks if the
# inverse has already been calculated. If so, if gets the result and skips 
# the computation. If not, it computes the inverse, sets the value in the cache
# via the setinversefunction.

cacheSolve <- function(x, ...) {
    inv <- x$getinverse()
    if(!is.null(inv)) {
        message("getting cached data.")
        return(inv)
    }
    data <- x$get()
    inv <- solve(data)
    x$setinverse(inv)
    inv
}

## Run data
## > x = rbind(c(5, 10), c(10, 5))
## > m = makeCacheMatrix(x)
## > m$get()
##       [,1] [,2]
## [1,]    5   10
## [2,]   10    5

## No cache in the first run
## > cacheSolve(m)
##             [,1]        [,2]
## [1,] -0.06666667  0.13333333
## [2,]  0.13333333 -0.06666667

## > cacheSolve(m)
## getting cached data.
##              [,1]        [,2]
## [1,] -0.06666667  0.13333333
## [2,]  0.13333333 -0.06666667
## > 
